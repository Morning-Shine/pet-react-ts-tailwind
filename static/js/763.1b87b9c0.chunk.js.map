{"version":3,"file":"static/js/763.1b87b9c0.chunk.js","mappings":"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","sources":["components/pageSizeSelect/index.tsx","components/pagination/OnePage.tsx","components/pagination/CollapsedPages.tsx","components/pagination/index.tsx","services/api/posts/index.ts","components/button/index.tsx","components/post/index.tsx","pages/posts/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport { PAGE_ALBUMS_SIZES } from 'constants/enums/pageSizes';\r\nimport { TPageSizeSelectProps } from './type';\r\nimport { COLOR_CONTRAST, COLOR_MAIN } from 'constants/styles/colors.constants';\r\nimport { useAppSelector } from 'utils/hooks/useRedux';\r\n\r\n\r\nconst PageSizeSelect: React.FC<TPageSizeSelectProps> = (props) => {\r\n  const { pageSizes, pageSize, onChange } = props;\r\n\r\n  return (\r\n    <div className=\"h-20 py-4 flex items-center\">\r\n      <label className=\"flex justify-between place-items-center space-x-1\">\r\n        <p\r\n          className={`text-lg text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`}\r\n        >\r\n          Отображать на странице:\r\n        </p>\r\n        <select\r\n          defaultValue={pageSize}\r\n          className={`max-h-7 w-10 text-center px-2 focus:outline-none appearance-none\r\n          dark:bg-${COLOR_MAIN}-700\r\n          rounded-sm border-2 border-${COLOR_MAIN}-600 dark:border-${COLOR_MAIN}-700\r\n          text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300 cursor-pointer`}\r\n          onChange={(e) => onChange(e)}\r\n        >\r\n          {pageSizes.map((option) => (\r\n            <option\r\n              key={option}\r\n              className={`text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`}\r\n            >\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageSizeSelect;\r\n","import React from 'react';\r\nimport { TOnePage } from './type';\r\nimport { COLOR_CONTRAST, COLOR_MAIN } from 'constants/styles/colors.constants';\r\nimport classNames from 'classnames';\r\n\r\nconst OnePage: React.FC<TOnePage> = ({ page, isCurrentPage, changePage }) => {\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        `h-7 w-7 min-w-min text-center\r\n      rounded-sm border-2 border-${COLOR_MAIN}-600 dark:border-${COLOR_MAIN}-700\r\n      text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`,\r\n        isCurrentPage\r\n          ? `bg-${COLOR_MAIN}-600 dark:bg-${COLOR_MAIN}-700`\r\n          : `cursor-pointer \r\n            hover:bg-${COLOR_MAIN}-500 hover:dark:bg-${COLOR_MAIN}-600 \r\n      `\r\n      )}\r\n      onClick={isCurrentPage ? undefined : () => changePage(page)}\r\n    >\r\n      {page}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OnePage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport OnePage from './OnePage';\r\nimport { TCollapsedPages } from './type';\r\nimport {\r\n  MdOutlineKeyboardDoubleArrowRight,\r\n  MdOutlineKeyboardDoubleArrowLeft,\r\n} from 'react-icons/md';\r\nimport { COLOR_CONTRAST, COLOR_MAIN } from 'constants/styles/colors.constants';\r\nimport { COLLAPSED_PAGES_STEP } from 'constants/enums/pageSizes';\r\n\r\n\r\nconst CollapsedPages: React.FC<TCollapsedPages> = (props) => {\r\n  const { pages, currentPage, changePage } = props;\r\n  const [pagesToDisplay, setPagesToDisplay] = useState(\r\n    pages.slice(0, COLLAPSED_PAGES_STEP)\r\n  );\r\n  const [isShowForwardArrow, setIsShowForwardArrow] = useState(true);\r\n\r\n  const lastPage = pages[pages.length - 1];\r\n\r\n  const nextPagesStack = () => {\r\n    const newPagesStack = [];\r\n    const stackEnd = pagesToDisplay[pagesToDisplay.length - 1];\r\n    const supposedStackEnd = stackEnd + COLLAPSED_PAGES_STEP;\r\n    const startNewStack = pages[pages.findIndex((page) => page === stackEnd)];\r\n\r\n    if (supposedStackEnd <= lastPage) {\r\n      for (\r\n        let i = startNewStack;\r\n        i < startNewStack + COLLAPSED_PAGES_STEP;\r\n        i++\r\n      ) {\r\n        newPagesStack.push(pages[i]);\r\n      }\r\n    } else {\r\n      for (let i = startNewStack; i < pages[pages.length - 1]; i++) {\r\n        newPagesStack.push(pages[i]);\r\n      }\r\n    }\r\n    if (supposedStackEnd >= lastPage) {\r\n      setIsShowForwardArrow(false);\r\n    }\r\n    setPagesToDisplay(newPagesStack);\r\n    changePage(newPagesStack[0]);\r\n  };\r\n\r\n  const previousPagesStack = () => {\r\n    const newPagesStack = [];\r\n    const stackStartIndex = pages.findIndex(\r\n      (page) => page === pagesToDisplay[0]\r\n    );\r\n    for (let i = 0; i < COLLAPSED_PAGES_STEP; i++) {\r\n      const newPage = pages[stackStartIndex - 1 - i];\r\n      newPagesStack.push(newPage);\r\n    }\r\n    if (!isShowForwardArrow) {\r\n      setIsShowForwardArrow(true);\r\n    }\r\n    changePage(newPagesStack[0]);\r\n    setPagesToDisplay(newPagesStack.reverse());\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPagesToDisplay(pages.slice(0, COLLAPSED_PAGES_STEP));\r\n    setIsShowForwardArrow(true);\r\n  }, [pages.length]);\r\n\r\n  return (\r\n    <div className=\"flex space-x-1\">\r\n      {pagesToDisplay.map((page) => (\r\n        <OnePage\r\n          key={page}\r\n          page={page}\r\n          isCurrentPage={currentPage === page}\r\n          changePage={changePage}\r\n        />\r\n      ))}\r\n      <div className=\"flex space-x-1 px-2\">\r\n        {isShowForwardArrow && (\r\n          <div\r\n            className={`h-7 w-7 cursor-pointer flex items-center justify-center\r\n                        rounded-sm border-2 border-${COLOR_MAIN}-600 dark:border-${COLOR_MAIN}-700\r\n                        text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`}\r\n            onClick={nextPagesStack}\r\n          >\r\n            <MdOutlineKeyboardDoubleArrowRight />\r\n          </div>\r\n        )}\r\n        {pagesToDisplay[0] !== 1 && (\r\n          <div\r\n            className={`h-7 w-7 cursor-pointer flex items-center justify-center\r\n                        rounded-sm border-2 border-${COLOR_MAIN}-600 dark:border-${COLOR_MAIN}-700\r\n                        text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`}\r\n            onClick={previousPagesStack}\r\n          >\r\n            <MdOutlineKeyboardDoubleArrowLeft />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {pagesToDisplay[pagesToDisplay.length - 1] !== lastPage && (\r\n        <OnePage\r\n          key={lastPage}\r\n          page={lastPage}\r\n          isCurrentPage={currentPage === lastPage}\r\n          changePage={changePage}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CollapsedPages;\r\n","import React from 'react';\r\nimport OnePage from './OnePage';\r\nimport CollapsedPages from './CollapsedPages';\r\nimport { TPagination } from './type';\r\n\r\nconst Pagination: React.FC<TPagination> = (props) => {\r\n  const { totalPages, changePage, currentPage } = props;\r\n  const pages = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  return totalPages !== 0 ? (\r\n    <div className=\"flex space-x-1 items-center\">\r\n      {\r\n        pages.length <= 7 ? (\r\n          pages.map((page) => (\r\n            <OnePage\r\n              key={page}\r\n              page={page}\r\n              isCurrentPage={currentPage === page}\r\n              changePage={changePage}\r\n            />\r\n          ))\r\n        ) : (\r\n          <CollapsedPages\r\n            pages={pages}\r\n            currentPage={currentPage}\r\n            changePage={changePage}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  ) : (\r\n    <div></div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { api } from '..';\r\nimport { TPostsResponse, TPostsResponseWithHeaders } from './type';\r\n\r\n\r\nexport const postsApi = api.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getPosts: build.query<TPostsResponseWithHeaders, string | void>({\r\n      query: (params) => ({\r\n        url: !!params ? `/posts?${params}` : '/posts',\r\n        method: 'GET',\r\n      }),\r\n      transformResponse: (response: TPostsResponse, meta) => {\r\n        const data = response;\r\n        const headers = {\r\n          xTotalCount: meta?.response?.headers.get('X-Total-Count'),\r\n        };\r\n        return { data, headers };\r\n      },\r\n      providesTags: ['Posts'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetPostsQuery } = postsApi;\r\n","import React from 'react';\r\n\r\n// TODO размер, функция (цвет), тип (иконка/текст)\r\nconst Button: React.FC = (props) => {\r\n    // const {size} = props\r\n  return (\r\n    <div className='border rounded'>Button\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport { TPostCard } from './type';\r\nimport { COLOR_CONTRAST, COLOR_MAIN } from 'constants/styles/colors.constants';\r\nimport Button from 'components/button';\r\n\r\n\r\nconst Post: React.FC<TPostCard> = ({ post }) => {\r\n  return (\r\n    <article\r\n      className={`border rounded border-${COLOR_CONTRAST}-200 dark:border-${COLOR_CONTRAST}-500 \r\n                  px-4 py-2\r\n                  text-${COLOR_CONTRAST}-900 dark:text-${COLOR_CONTRAST}-300`}\r\n    >\r\n      <div className=\"flex space-x-2 items-center text-lg font-medium\">\r\n        <h3>\r\n          <span className={`text-${COLOR_MAIN}-600 pr-2`}>#{post.id}</span>\r\n          {post.title}\r\n        </h3>\r\n        <Button/>\r\n      </div>\r\n      <p>{post.body}</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useEffect } from 'react';\r\nimport { useGetPostsQuery } from 'services/api/posts';\r\nimport { useAppDispatch, useAppSelector } from 'utils/hooks/useRedux';\r\nimport PageSizeSelect from 'components/pageSizeSelect';\r\nimport Pagination from 'components/pagination';\r\nimport LoadingPage from 'components/loadingPage';\r\nimport { changePage, setPagesTotal } from 'store/postsSlice';\r\nimport { changePostsPageSize } from 'store/pageSizesSlice';\r\nimport { PAGE_POST_SIZES } from 'constants/enums/pageSizes';\r\nimport Post from 'components/post';\r\n\r\n\r\n//TODO заменить пагинацию на бесконечный скролл?\r\nconst PagePosts: React.FC = () => {\r\n  const pageSize = useAppSelector((state) => state.pageSizes.posts);\r\n  const currentPage = useAppSelector((state) => state.posts.page);\r\n  const totalPages = useAppSelector((state) => state.posts.pagesTotal);\r\n\r\n  const params = new URLSearchParams({\r\n    _limit: pageSize.toString(),\r\n    _page: currentPage.toString(),\r\n  }).toString();\r\n\r\n  const { data, isFetching } = useGetPostsQuery(params);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (data?.headers?.xTotalCount) {\r\n      const calcTotal = +data.headers.xTotalCount / pageSize;\r\n      dispatch(setPagesTotal(calcTotal));\r\n    }\r\n    return () => {\r\n      dispatch(setPagesTotal(0));\r\n    };\r\n  }, [data, dispatch, pageSize]);\r\n\r\n  const onPageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = +e.target.value as (typeof PAGE_POST_SIZES)[number];\r\n    dispatch(changePostsPageSize(value));\r\n    dispatch(changePage(1));\r\n  };\r\n\r\n  const onPageChange = (page: number) => dispatch(changePage(page));\r\n\r\n  console.log('data', data);\r\n\r\n  return (\r\n    <section className=\"w-4/5 mx-auto flex flex-col justify-between grow\">\r\n      {isFetching && <LoadingPage />}\r\n      {!isFetching && !!data?.data && (\r\n        <div className=\"my-5 flex flex-col space-y-5\">\r\n          <div className=\"text-xl font-bold text-red-800\">\r\n            РАЗДЕЛ НАХОДИТСЯ В РАЗРАБОТКЕ\r\n          </div>\r\n          {data.data.map((post) => (\r\n            <Post\r\n              key={post.id}\r\n              post={post}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      <div className=\"flex flex-col lg:flex-row justify-between lg:space-x-3\">\r\n        <Pagination\r\n          totalPages={totalPages}\r\n          changePage={onPageChange}\r\n          currentPage={currentPage}\r\n        />\r\n        <PageSizeSelect\r\n          pageSizes={PAGE_POST_SIZES}\r\n          pageSize={pageSize}\r\n          onChange={onPageSizeChange}\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PagePosts;\r\n"],"names":["props","pageSizes","pageSize","onChange","_jsx","className","children","_jsxs","concat","COLOR_CONTRAST","defaultValue","COLOR_MAIN","e","map","option","_ref","page","isCurrentPage","changePage","classNames","onClick","undefined","pages","currentPage","_useState","useState","slice","COLLAPSED_PAGES_STEP","_useState2","_slicedToArray","pagesToDisplay","setPagesToDisplay","_useState3","_useState4","isShowForwardArrow","setIsShowForwardArrow","lastPage","length","useEffect","OnePage","newPagesStack","stackEnd","supposedStackEnd","startNewStack","findIndex","i","push","MdOutlineKeyboardDoubleArrowRight","stackStartIndex","newPage","reverse","MdOutlineKeyboardDoubleArrowLeft","totalPages","CollapsedPages","useGetPostsQuery","api","injectEndpoints","endpoints","build","getPosts","query","params","url","method","transformResponse","response","meta","_meta$response","data","headers","xTotalCount","get","providesTags","post","id","title","Button","body","useAppSelector","state","posts","pagesTotal","URLSearchParams","_limit","toString","_page","_useGetPostsQuery","isFetching","dispatch","useAppDispatch","_data$headers","calcTotal","setPagesTotal","console","log","LoadingPage","Post","Pagination","PageSizeSelect","PAGE_POST_SIZES","value","target","changePostsPageSize"],"sourceRoot":""}